#!/usr/bin/env node

const cloudinary = require('cloudinary').v2;
const fs = require('fs');
const path = require('path');

// Configure Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'dwav84wrk',
  api_key: process.env.CLOUDINARY_API_KEY || '589773693657812',
  api_secret: process.env.CLOUDINARY_API_SECRET || 'V2qOKwLBhCEhjaIm8ex7AgwEdhY'
});

class WikipediaImageReorganizer {
  constructor() {
    this.uploadedImages = new Set();
    this.results = {};
  }

  async uploadImageToCorrectFolder(imagePath, dishName, countryName, imageNumber) {
    return new Promise(async (resolve, reject) => {
      const fileName = `${dishName.toLowerCase().replace(/[^a-z0-9]/g, '_')}_${imageNumber}.jpg`;
      const folder = `food-guessing-game/${countryName.toLowerCase().replace(/\s+/g, '-')}/${dishName.toLowerCase().replace(/\s+/g, '-')}`;
      const publicId = `${folder}/${fileName}`;

      if (this.uploadedImages.has(publicId)) {
        console.log(`‚è≠Ô∏è  Skipping ${fileName} (already uploaded)`);
        resolve({
          publicId: publicId,
          secureUrl: `https://res.cloudinary.com/dwav84wrk/image/upload/${publicId}.jpg`
        });
        return;
      }

      try {
        console.log(`‚òÅÔ∏è  Uploading ${fileName} to correct folder: ${folder}`);
        const result = await cloudinary.uploader.upload(imagePath, {
          public_id: publicId,
          folder: folder,
          resource_type: 'image',
          transformation: [
            { quality: 'auto', fetch_format: 'auto' },
            { width: 800, height: 600, crop: 'limit' }
          ]
        });

        this.uploadedImages.add(publicId);
        console.log(`‚úÖ Uploaded: ${fileName} -> ${result.secure_url}`);

        resolve({
          publicId: result.public_id,
          secureUrl: result.secure_url,
          fileName: fileName
        });
      } catch (error) {
        console.log(`‚ùå Failed to upload ${fileName}:`, error.message);
        resolve(null);
      }
    });
  }

  async reorganizeImages() {
    console.log('üîÑ Reorganizing Wikipedia images to correct Cloudinary folders...\n');

    const dishes = [
      { name: 'Margherita Pizza', country: 'Italy', files: ['margherita_pizza_1.jpg', 'margherita_pizza_2.jpg', 'margherita_pizza_3.jpg', 'margherita_pizza_4.jpg'] },
      { name: 'Spaghetti Carbonara', country: 'Italy', files: ['carbonara_1.jpg', 'carbonara_2.jpg', 'carbonara_3.jpg', 'pasta_carbonara_1.jpg', 'pasta_carbonara_2.jpg', 'pasta_carbonara_3.jpg'] },
      { name: 'Risotto', country: 'Italy', files: ['risotto_1.jpg', 'risotto_2.jpg', 'risotto_3.jpg'] },
      { name: 'Gelato', country: 'Italy', files: ['gelato_1.jpg', 'gelato_2.jpg'] },
      { name: 'Tiramisu', country: 'Italy', files: ['tiramisu_1.jpg', 'tiramisu_2.jpg', 'tiramisu_3.jpg'] },
      { name: 'Lasagna', country: 'Italy', files: ['lasagne_1.jpg', 'lasagne_2.jpg', 'lasagne_3.jpg', 'lasagne_4.jpg'] },
      { name: 'Osso Buco', country: 'Italy', files: ['osso_buco_1.jpg', 'osso_buco_2.jpg', 'osso_buco_3.jpg'] },
      { name: 'Bruschetta', country: 'Italy', files: ['bruschetta_1.jpg', 'bruschetta_2.jpg', 'bruschetta_3.jpg', 'bruschetta_4.jpg', 'bruschetta_5.jpg'] }
    ];

    const downloadedImagesPath = path.join(__dirname, 'downloaded_images');

    for (const dish of dishes) {
      console.log(`\nüçΩÔ∏è  Processing: ${dish.name} (${dish.country})`);
      
      this.results[dish.name] = [];
      let imageNumber = 1;

      for (const fileName of dish.files) {
        const imagePath = path.join(downloadedImagesPath, fileName);
        
        if (fs.existsSync(imagePath)) {
          const uploadResult = await this.uploadImageToCorrectFolder(
            imagePath,
            dish.name,
            dish.country,
            imageNumber
          );
          
          if (uploadResult) {
            this.results[dish.name].push(uploadResult.secureUrl);
            imageNumber++;
          }
        } else {
          console.log(`‚ö†Ô∏è  File not found: ${fileName}`);
        }
      }

      console.log(`‚úÖ ${dish.name}: ${this.results[dish.name].length} images uploaded`);
    }

    return this.results;
  }

  generateGoogleDriveScript() {
    let script = `#!/bin/bash
# Google Drive Upload Script for Wikipedia Images
# Generated by Wikipedia Image Reorganizer

echo "üöÄ Starting Google Drive upload for Wikipedia images..."

`;

    Object.entries(this.results).forEach(([dishName, urls]) => {
      script += `echo "üìÅ Creating folder: Food Guessing Game/Italy/${dishName}"\n`;
      script += `# Create folder: Food Guessing Game/Italy/${dishName}\n\n`;

      urls.forEach((url, index) => {
        script += `echo "üì§ Uploading: ${dishName} ${index + 1}.jpg"\n`;
        script += `# Cloudinary URL: ${url}\n`;
        script += `# File: ${dishName} ${index + 1}.jpg\n\n`;
      });
    });

    script += `echo "‚úÖ Google Drive upload script generated"\n`;

    const scriptPath = path.join(__dirname, 'google_drive_upload_wikipedia_images.sh');
    fs.writeFileSync(scriptPath, script);
    console.log(`\nüìú Generated Google Drive script: ${scriptPath}`);
  }

  generateAPIUpdate() {
    console.log('\nüìù API Update for src/app/api/foods/route.ts:');
    console.log('Add these new image URLs to your cloudinaryImages mapping:\n');

    Object.entries(this.results).forEach(([dishName, urls]) => {
      if (urls.length > 0) {
        console.log(`'${dishName}': [`);
        urls.forEach(url => {
          console.log(`  '${url}',`);
        });
        console.log('],\n');
      }
    });
  }

  async saveResults() {
    const resultsPath = path.join(__dirname, 'reorganized_wikipedia_results.json');
    fs.writeFileSync(resultsPath, JSON.stringify(this.results, null, 2));
    console.log(`üìÑ Results saved to: ${resultsPath}`);
  }
}

async function main() {
  const reorganizer = new WikipediaImageReorganizer();

  try {
    console.log('üöÄ Wikipedia Image Reorganizer');
    console.log('==============================\n');

    // Reorganize images to correct Cloudinary folders
    await reorganizer.reorganizeImages();

    // Generate Google Drive upload script
    reorganizer.generateGoogleDriveScript();

    // Generate API update code
    reorganizer.generateAPIUpdate();

    // Save results
    await reorganizer.saveResults();

    console.log('\nüéâ Reorganization complete!');
    console.log('\nNext steps:');
    console.log('1. Update your API with the new image URLs shown above');
    console.log('2. Upload images to Google Drive using the generated script');
    console.log('3. Test the game to see the new Wikipedia images');

  } catch (error) {
    console.error('‚ùå Reorganization failed:', error);
  }
}

if (require.main === module) {
  main();
}

module.exports = WikipediaImageReorganizer;




